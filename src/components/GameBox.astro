---
const { game } = Astro.props;
const frontCover = "/game-images/" + game.slug + "/front-cover.jpg";
const backCover = "/game-images/" + game.slug + "/back-cover.jpg";
const leftCover = "/game-images/" + game.slug + "/left-cover.jpg";
---

<script>
    import { SVGLoader } from "three/examples/jsm/loaders/SVGLoader";
    import * as THREE from "three";
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import { ShapeGeometry } from "three";

    const boxHeight = 17.7;
    const boxWidth = 13.7;
    const boxDepth = 2.5;

    let renderer: THREE.WebGLRenderer;
    let scene: THREE.Scene;
    let camera: THREE.PerspectiveCamera;
    let controls: OrbitControls;

    init();
    animate();

    function init(): void {
        const canvas = document.getElementById("game-box-3d") as HTMLElement;
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(
            90,
            canvas.offsetWidth / 500,
            1,
            1000
        );

        renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        renderer.setSize(canvas.offsetWidth, 500);

        controls = new OrbitControls(camera, renderer.domElement);
        controls.update();

        canvas.appendChild(renderer.domElement);

        scene.add(createBox());
        addLight();

        camera.position.x = 2;
        camera.position.y = 1;
        camera.position.z = 17;
        camera.lookAt(1, 0.2, 1);
        
    }

    function createBox(): THREE.Group {
        const frontCoverNode = document.getElementById(
            "front-cover"
        ) as HTMLInputElement;
        const backCoverNode = document.getElementById(
            "back-cover"
        ) as HTMLInputElement;
        const leftCoverNode = document.getElementById(
            "left-cover"
        ) as HTMLInputElement;

        const textureFront = new THREE.TextureLoader().load('/mega-drive' + frontCoverNode.value);
        const textureBack = new THREE.TextureLoader().load('/mega-drive' + backCoverNode.value);
        const textureLeft = new THREE.TextureLoader().load('/mega-drive' + leftCoverNode.value);
        const materialFront = new THREE.MeshLambertMaterial({
            map: textureFront,
        });
        const materialBack = new THREE.MeshLambertMaterial({ map: textureBack });
        const materialLeft = new THREE.MeshLambertMaterial({ map: textureLeft });
        const materialBlack = new THREE.MeshLambertMaterial({color: '#151515'});

        const boxGroup = new THREE.Group();
        const innerGeom = new THREE.BoxGeometry(boxWidth - .7, boxHeight - .7, 2.4);
        const innerCube = new THREE.Mesh(innerGeom, materialBlack);
        boxGroup.add(innerCube);


        const frontGeom = new THREE.BoxGeometry(boxWidth, boxHeight, .1);
        const frontCube = new THREE.Mesh(frontGeom, [
            materialBlack,
            materialBlack,
            materialBlack,
            materialBlack,
            materialFront,
            materialBlack,
        ]);
        frontCube.position.z = 1.2
        boxGroup.add(frontCube);

        const backGeom = new THREE.BoxGeometry(boxWidth, boxHeight, .1);
        const backCube = new THREE.Mesh(backGeom, [
            materialBlack,
            materialBlack,
            materialBlack,
            materialBlack,
            materialBlack,
            materialBack,
        ]);
        backCube.position.z = -1.2
        boxGroup.add(backCube);

        const leftGeom = new THREE.BoxGeometry(.1, boxHeight, boxDepth);
        const leftCube = new THREE.Mesh(leftGeom, [
            materialBlack,
            materialLeft,
            materialBlack,
            materialBlack,
            materialBlack,
            materialBlack,
        ]);
        leftCube.position.x = -6.8
        boxGroup.add(leftCube);

        const svgMarkup = (document.querySelector('svg') as SVGElement).outerHTML;

        const loader = new SVGLoader();
        const svgData = loader.parse(svgMarkup);
        const svgGroup = new THREE.Group();

        svgData.paths.forEach((path, i) => {
        const shapes = path.toShapes(true);

        // Each path has array of shapes
        shapes.forEach((shape, j) => {
        // Finally we can take each shape and extrude    it
            const geometry = new THREE.ExtrudeGeometry(shape, {
            depth: .1,
            bevelEnabled: false
            });

            // Create a mesh and add it to the group
            const mesh = new THREE.Mesh(geometry, materialBlack);

            svgGroup.add(mesh);
            });
        });
        svgGroup.scale.x *= .02;
        svgGroup.scale.y *= -.02;
        svgGroup.position.x = -2;
        svgGroup.position.y = 10.9;
        svgGroup.position.z = -1.2;        

        boxGroup.add(svgGroup);

        return boxGroup;
    }

    function addLight() {
        const hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1.1 );
		hemiLight.color.setHSL( 0.6, 1, 0.6 );
		hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );
		hemiLight.position.set( 0, 50, 0 );
		scene.add( hemiLight );


        const dirLight = new THREE.DirectionalLight( 0xffffff, 1 );
		dirLight.color.setHSL( 0.1, 1, 0.95 );
		dirLight.position.set( - 1, 1.75, 1 );
		dirLight.position.multiplyScalar( 30 );
		scene.add( dirLight );

		dirLight.castShadow = true;

		dirLight.shadow.mapSize.width = 2048;
		dirLight.shadow.mapSize.height = 2048;

		const d = 50;

		dirLight.shadow.camera.left = - d;
		dirLight.shadow.camera.right = d;
		dirLight.shadow.camera.top = d;
		dirLight.shadow.camera.bottom = - d;

		dirLight.shadow.camera.far = 3500;
		dirLight.shadow.bias = - 0.0001;
    }

    function animate(): void {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
        controls.update();
    }

</script>
<style></style>
<div id="game-box-3d">
    <input id="front-cover" value={frontCover} class="d-none" />
    <input id="back-cover" value={backCover} class="d-none" />
    <input id="left-cover" value={leftCover} class="d-none" />
    <svg class="d-none" viewBox="0 0 202 202" class="image" height="202px" version="1.1" width="202px"><path d="m 201.668,19.009 c 0.22206,35.073107 1e-5,86.69308 1e-5,86.69308 L 0.71199131,106.04135 0.26102641,19.009 c 0,0 0.27324997,-18.23083074 19.26684859,-18.385 39.448908,-0.32020309 138.799245,0.10939658 165.827375,0 8.19284,-0.0331606 16.26088,10.192254 16.31275,18.385 z M 39.596914,39.58386 c -22.48393,7.078358 -21.560166,30.712834 -0.02963,36.78228 32.279504,-0.30334 93.637136,-0.95341 122.710816,0 17.98546,-7.095055 18.65729,-28.640904 0.0296,-36.78228 -11.56182,0.037 -35.05981,0.256587 -40.68877,-2.32e-4 -3.21256,-4.589372 -11.08438,-12.141786 -20.94445,-12.105425 -7.416842,-0.01011 -15.875902,6.112169 -20.504468,12.105425 -13.004542,-0.0054 -24.471251,2.32e-4 -40.573132,2.32e-4 z" fill="none" stroke="#979797" /></svg>
</div>
