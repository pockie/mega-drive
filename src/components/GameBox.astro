---
const { game } = Astro.props;
const frontCover = "/game-images/" + game.data.shortName + "/front-cover.jpg";
const backCover = "/game-images/" + game.data.shortName + "/back-cover.jpg";
---

<script>
    import { SVGLoader } from "three/examples/jsm/loaders/SVGLoader";
    import * as THREE from "three";
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

    let cube: THREE.Mesh;
    let renderer: THREE.WebGLRenderer;
    let scene: THREE.Scene;
    let camera: THREE.PerspectiveCamera;
    let controls: OrbitControls;

    init();
    animate();

    function init() {
        const frontCoverNode = document.getElementById(
            "front-cover"
        ) as HTMLInputElement;
        const backCoverNode = document.getElementById(
            "back-cover"
        ) as HTMLInputElement;

        const canvas = document.getElementById("game-box-3d") as HTMLElement;
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(
            90,
            canvas.offsetWidth / 500,
            1,
            1000
        );

        renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        renderer.setSize(canvas.offsetWidth, 500);

        controls = new OrbitControls(camera, renderer.domElement);
        controls.update();

        canvas.appendChild(renderer.domElement);

        const textureFront = new THREE.TextureLoader().load(
            frontCoverNode.value
        );
        const textureBack = new THREE.TextureLoader().load(backCoverNode.value);
        const textureLeft = new THREE.TextureLoader().load(
            "/game-images/standard-textures/left-cover.jpg"
        );
        const textureBlack = new THREE.TextureLoader().load(
            "/game-images/standard-textures/black-cover.jpg"
        );
        const materialFront = new THREE.MeshBasicMaterial({
            map: textureFront,
        });
        const materialBack = new THREE.MeshBasicMaterial({ map: textureBack });
        const materialLeft = new THREE.MeshBasicMaterial({ map: textureLeft });
        const materialBlack = new THREE.MeshBasicMaterial({
            map: textureBlack,
        });

        const geometry = new THREE.BoxGeometry(13.7, 17.7, 2.5);
        cube = new THREE.Mesh(geometry, [
            materialBlack,
            materialLeft,
            materialBlack,
            materialBlack,
            materialFront,
            materialBack,
        ]);
        scene.add(cube);


        const svgMarkup = (document.querySelector('svg') as SVGElement).outerHTML;

        const loader = new SVGLoader();
        const svgData = loader.parse(svgMarkup);
        const svgGroup = new THREE.Group();

        svgData.paths.forEach((path, i) => {
        const shapes = path.toShapes(true);

        // Each path has array of shapes
        shapes.forEach((shape, j) => {
        // Finally we can take each shape and extrude    it
            const geometry = new THREE.ExtrudeGeometry(shape, {
            depth: .1,
            bevelEnabled: false
            });

            // Create a mesh and add it to the group
            const mesh = new THREE.Mesh(geometry, materialBlack);

            svgGroup.add(mesh);
            });
        });
        svgGroup.scale.x *= .02;
        svgGroup.scale.y *= -.02;
        svgGroup.position.x = -2;
        svgGroup.position.y = 10.9;
        svgGroup.position.z = -1;

        scene.add(svgGroup);

        camera.position.x = 2;
        camera.position.y = 1;
        camera.position.z = 17;
        camera.lookAt(1, 0.2, 1);
    }

    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
        controls.update();
    }
</script>
<style></style>
<div id="game-box-3d">
    <input id="front-cover" value={frontCover} class="d-none" />
    <input id="back-cover" value={backCover} class="d-none" />
    <svg class="d-none" viewBox="0 0 202 202" class="image" height="202px" version="1.1" width="202px"><path d="m 201.668,19.009 c 0.22206,35.073107 1e-5,86.69308 1e-5,86.69308 L 0.71199131,106.04135 0.26102641,19.009 c 0,0 0.27324997,-18.23083074 19.26684859,-18.385 39.448908,-0.32020309 138.799245,0.10939658 165.827375,0 8.19284,-0.0331606 16.26088,10.192254 16.31275,18.385 z M 39.596914,39.58386 c -22.48393,7.078358 -21.560166,30.712834 -0.02963,36.78228 32.279504,-0.30334 93.637136,-0.95341 122.710816,0 17.98546,-7.095055 18.65729,-28.640904 0.0296,-36.78228 -11.56182,0.037 -35.05981,0.256587 -40.68877,-2.32e-4 -3.21256,-4.589372 -11.08438,-12.141786 -20.94445,-12.105425 -7.416842,-0.01011 -15.875902,6.112169 -20.504468,12.105425 -13.004542,-0.0054 -24.471251,2.32e-4 -40.573132,2.32e-4 z" fill="none" stroke="#979797" /></svg>
</div>
